/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace RockPaperScissors {
  export type GameStruct = {
    player1: string;
    player2: string;
    player1HashedChoice: BytesLike;
    player1Choice: BigNumberish;
    player2Choice: BigNumberish;
    player2ChoiceTimestamp: BigNumberish;
  };

  export type GameStructOutput = [
    string,
    string,
    string,
    number,
    number,
    BigNumber
  ] & {
    player1: string;
    player2: string;
    player1HashedChoice: string;
    player1Choice: number;
    player2Choice: number;
    player2ChoiceTimestamp: BigNumber;
  };
}

export interface RockPaperScissorsInterface extends utils.Interface {
  contractName: "RockPaperScissors";
  functions: {
    "checkAutoWin(uint256)": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "getGame(uint256)": FunctionFragment;
    "getGamesCount()": FunctionFragment;
    "hashChoice(uint8,bytes32)": FunctionFragment;
    "revealChoice(uint8,bytes32,uint256)": FunctionFragment;
    "submitPlayer1Choice(bytes32)": FunctionFragment;
    "submitPlayer2Choice(uint8,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkAutoWin",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGamesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashChoice",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealChoice",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPlayer1Choice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitPlayer2Choice",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAutoWin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGamesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashChoice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPlayer1Choice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitPlayer2Choice",
    data: BytesLike
  ): Result;

  events: {
    "GameCreated(uint256,address)": EventFragment;
    "GameDraw(uint256,uint8,uint8)": EventFragment;
    "GameFinished(uint256,address,uint8,address,uint8)": EventFragment;
    "GameStarted(uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameDraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameFinished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStarted"): EventFragment;
}

export type GameCreatedEvent = TypedEvent<
  [BigNumber, string],
  { gameId: BigNumber; player1: string }
>;

export type GameCreatedEventFilter = TypedEventFilter<GameCreatedEvent>;

export type GameDrawEvent = TypedEvent<
  [BigNumber, number, number],
  { gameId: BigNumber; player1Choice: number; player2Choice: number }
>;

export type GameDrawEventFilter = TypedEventFilter<GameDrawEvent>;

export type GameFinishedEvent = TypedEvent<
  [BigNumber, string, number, string, number],
  {
    gameId: BigNumber;
    winner: string;
    winningChoice: number;
    loser: string;
    losingChoice: number;
  }
>;

export type GameFinishedEventFilter = TypedEventFilter<GameFinishedEvent>;

export type GameStartedEvent = TypedEvent<
  [BigNumber, string, string],
  { gameId: BigNumber; player1: string; player2: string }
>;

export type GameStartedEventFilter = TypedEventFilter<GameStartedEvent>;

export interface RockPaperScissors extends BaseContract {
  contractName: "RockPaperScissors";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RockPaperScissorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkAutoWin(
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number, BigNumber] & {
        player1: string;
        player2: string;
        player1HashedChoice: string;
        player1Choice: number;
        player2Choice: number;
        player2ChoiceTimestamp: BigNumber;
      }
    >;

    getGame(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[RockPaperScissors.GameStructOutput]>;

    getGamesCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    hashChoice(
      _choice: BigNumberish,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    revealChoice(
      _player1choice: BigNumberish,
      _player1salt: BytesLike,
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitPlayer1Choice(
      _hashedChoice: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitPlayer2Choice(
      _choice: BigNumberish,
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  checkAutoWin(
    _gameId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  games(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, number, BigNumber] & {
      player1: string;
      player2: string;
      player1HashedChoice: string;
      player1Choice: number;
      player2Choice: number;
      player2ChoiceTimestamp: BigNumber;
    }
  >;

  getGame(
    _gameId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<RockPaperScissors.GameStructOutput>;

  getGamesCount(overrides?: CallOverrides): Promise<BigNumber>;

  hashChoice(
    _choice: BigNumberish,
    _salt: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  revealChoice(
    _player1choice: BigNumberish,
    _player1salt: BytesLike,
    _gameId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitPlayer1Choice(
    _hashedChoice: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitPlayer2Choice(
    _choice: BigNumberish,
    _gameId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkAutoWin(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number, BigNumber] & {
        player1: string;
        player2: string;
        player1HashedChoice: string;
        player1Choice: number;
        player2Choice: number;
        player2ChoiceTimestamp: BigNumber;
      }
    >;

    getGame(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<RockPaperScissors.GameStructOutput>;

    getGamesCount(overrides?: CallOverrides): Promise<BigNumber>;

    hashChoice(
      _choice: BigNumberish,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    revealChoice(
      _player1choice: BigNumberish,
      _player1salt: BytesLike,
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitPlayer1Choice(
      _hashedChoice: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitPlayer2Choice(
      _choice: BigNumberish,
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GameCreated(uint256,address)"(
      gameId?: null,
      player1?: null
    ): GameCreatedEventFilter;
    GameCreated(gameId?: null, player1?: null): GameCreatedEventFilter;

    "GameDraw(uint256,uint8,uint8)"(
      gameId?: null,
      player1Choice?: null,
      player2Choice?: null
    ): GameDrawEventFilter;
    GameDraw(
      gameId?: null,
      player1Choice?: null,
      player2Choice?: null
    ): GameDrawEventFilter;

    "GameFinished(uint256,address,uint8,address,uint8)"(
      gameId?: null,
      winner?: null,
      winningChoice?: null,
      loser?: null,
      losingChoice?: null
    ): GameFinishedEventFilter;
    GameFinished(
      gameId?: null,
      winner?: null,
      winningChoice?: null,
      loser?: null,
      losingChoice?: null
    ): GameFinishedEventFilter;

    "GameStarted(uint256,address,address)"(
      gameId?: null,
      player1?: null,
      player2?: null
    ): GameStartedEventFilter;
    GameStarted(
      gameId?: null,
      player1?: null,
      player2?: null
    ): GameStartedEventFilter;
  };

  estimateGas: {
    checkAutoWin(
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getGame(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGamesCount(overrides?: CallOverrides): Promise<BigNumber>;

    hashChoice(
      _choice: BigNumberish,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revealChoice(
      _player1choice: BigNumberish,
      _player1salt: BytesLike,
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitPlayer1Choice(
      _hashedChoice: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitPlayer2Choice(
      _choice: BigNumberish,
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkAutoWin(
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGame(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGamesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashChoice(
      _choice: BigNumberish,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revealChoice(
      _player1choice: BigNumberish,
      _player1salt: BytesLike,
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitPlayer1Choice(
      _hashedChoice: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitPlayer2Choice(
      _choice: BigNumberish,
      _gameId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
