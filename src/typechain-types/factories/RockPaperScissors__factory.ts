/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RockPaperScissors,
  RockPaperScissorsInterface,
} from "../RockPaperScissors";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "player1",
        type: "address",
      },
    ],
    name: "GameCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum RockPaperScissors.Choice",
        name: "player1Choice",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "enum RockPaperScissors.Choice",
        name: "player2Choice",
        type: "uint8",
      },
    ],
    name: "GameDraw",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum RockPaperScissors.Choice",
        name: "winningChoice",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "loser",
        type: "address",
      },
      {
        indexed: false,
        internalType: "enum RockPaperScissors.Choice",
        name: "losingChoice",
        type: "uint8",
      },
    ],
    name: "GameFinished",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "gameId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "player1",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "player2",
        type: "address",
      },
    ],
    name: "GameStarted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gameId",
        type: "uint256",
      },
    ],
    name: "checkAutoWin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "games",
    outputs: [
      {
        internalType: "address",
        name: "player1",
        type: "address",
      },
      {
        internalType: "address",
        name: "player2",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "player1HashedChoice",
        type: "bytes32",
      },
      {
        internalType: "enum RockPaperScissors.Choice",
        name: "player1Choice",
        type: "uint8",
      },
      {
        internalType: "enum RockPaperScissors.Choice",
        name: "player2Choice",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "player2ChoiceTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_gameId",
        type: "uint256",
      },
    ],
    name: "getGame",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "player1",
            type: "address",
          },
          {
            internalType: "address",
            name: "player2",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "player1HashedChoice",
            type: "bytes32",
          },
          {
            internalType: "enum RockPaperScissors.Choice",
            name: "player1Choice",
            type: "uint8",
          },
          {
            internalType: "enum RockPaperScissors.Choice",
            name: "player2Choice",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "player2ChoiceTimestamp",
            type: "uint256",
          },
        ],
        internalType: "struct RockPaperScissors.Game",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGamesCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum RockPaperScissors.Choice",
        name: "_choice",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_salt",
        type: "bytes32",
      },
    ],
    name: "hashChoice",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum RockPaperScissors.Choice",
        name: "_player1choice",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "_player1salt",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_gameId",
        type: "uint256",
      },
    ],
    name: "revealChoice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hashedChoice",
        type: "bytes32",
      },
    ],
    name: "submitPlayer1Choice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum RockPaperScissors.Choice",
        name: "_choice",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_gameId",
        type: "uint256",
      },
    ],
    name: "submitPlayer2Choice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611766806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806360bb616f1161005b57806360bb616f146101185780636809f4d5146101345780639c73b0b714610150578063a2f77bcc1461018057610088565b8063117a5b901461008d57806315d1329b146100c257806317b7a476146100de57806346f84439146100fc575b600080fd5b6100a760048036038101906100a29190610fbb565b6101b0565b6040516100b9969594939291906110c8565b60405180910390f35b6100dc60048036038101906100d7919061114e565b610256565b005b6100e66103fa565b6040516100f3919061118e565b60405180910390f35b610116600480360381019061011191906111d5565b610406565b005b610132600480360381019061012d9190611202565b6105ce565b005b61014e60048036038101906101499190610fbb565b6109e4565b005b61016a60048036038101906101659190611255565b610ae9565b6040516101779190611295565b60405180910390f35b61019a60048036038101906101959190610fbb565b610afd565b6040516101a79190611367565b60405180910390f35b600081815481106101c057600080fd5b90600052602060002090600502016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030160009054906101000a900460ff16908060030160019054906101000a900460ff16908060040154905086565b336000828154811061026b5761026a611382565b5b906000526020600020906005020160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600082815481106102cf576102ce611382565b5b906000526020600020906005020160030160016101000a81548160ff0219169083600281111561030257610301611042565b5b0217905550426000828154811061031c5761031b611382565b5b9060005260206000209060050201600401819055507f5b11b2d1f1a29e94e8fd947f6b5b713f3dd7fa6e1d9d5b65826d69b9aeb664eb816000838154811061036757610366611382565b5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600084815481106103ad576103ac611382565b5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516103ee939291906113b1565b60405180910390a15050565b60008080549050905090565b61040e610ef7565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505081816040018181525050600081908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030160006101000a81548160ff0219169083600281111561053f5761053e611042565b5b021790555060808201518160030160016101000a81548160ff0219169083600281111561056f5761056e611042565b5b021790555060a0820151816004015550507fc3e0f84839dc888c892a013d10c8f9d6dc05a21a879d0ce468ca558013e9121c60016000805490506105b39190611417565b336040516105c292919061144b565b60405180910390a15050565b60008082815481106105e3576105e2611382565b5b906000526020600020906005020190508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106a057508060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6106df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d6906114d1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156107915750600073ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b6107d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c790611563565b60405180910390fd5b60006107dc8585610c6f565b905081600201548114610824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081b906115cf565b60405180910390fd5b846000848154811061083957610838611382565b5b906000526020600020906005020160030160006101000a81548160ff0219169083600281111561086c5761086b611042565b5b02179055506109dd6000848154811061088857610887611382565b5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff16600281111561097c5761097b611042565b5b600281111561098e5761098d611042565b5b81526020016003820160019054906101000a900460ff1660028111156109b7576109b6611042565b5b60028111156109c9576109c8611042565b5b815260200160048201548152505084610ca2565b5050505050565b60008082815481106109f9576109f8611382565b5b906000526020600020906005020190506000603c90506000801b826002015414158015610a355750808260040154610a3191906115ef565b4210155b15610ae4577fa2a54cb72719c6713402d2525b2bf25b22fdb1e36f848e07864890bbcd516a9b838360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460030160019054906101000a900460ff168560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660030160009054906101000a900460ff16604051610adb959493929190611623565b60405180910390a15b505050565b6000610af58383610c6f565b905092915050565b610b05610ef7565b60008281548110610b1957610b18611382565b5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820160009054906101000a900460ff166002811115610c0d57610c0c611042565b5b6002811115610c1f57610c1e611042565b5b81526020016003820160019054906101000a900460ff166002811115610c4857610c47611042565b5b6002811115610c5a57610c59611042565b5b81526020016004820154815250509050919050565b60008282604051602001610c849291906116cd565b60405160208183030381529060405280519060200120905092915050565b81608001516002811115610cb957610cb8611042565b5b82606001516002811115610cd057610ccf611042565b5b03610d1d577fddfb3a236768b088734a6631aff7da8737f8d53376e308625db63952519b01208183606001518460800151604051610d10939291906116f9565b60405180910390a1610ef3565b60006002811115610d3157610d30611042565b5b82606001516002811115610d4857610d47611042565b5b148015610d7c5750600280811115610d6357610d62611042565b5b82608001516002811115610d7a57610d79611042565b5b145b80610de3575060016002811115610d9657610d95611042565b5b82606001516002811115610dad57610dac611042565b5b148015610de2575060006002811115610dc957610dc8611042565b5b82608001516002811115610de057610ddf611042565b5b145b5b80610e495750600280811115610dfc57610dfb611042565b5b82606001516002811115610e1357610e12611042565b5b148015610e48575060016002811115610e2f57610e2e611042565b5b82608001516002811115610e4657610e45611042565b5b145b5b15610ea2577fa2a54cb72719c6713402d2525b2bf25b22fdb1e36f848e07864890bbcd516a9b818360000151846060015185602001518660800151604051610e95959493929190611623565b60405180910390a1610ef2565b7fa2a54cb72719c6713402d2525b2bf25b22fdb1e36f848e07864890bbcd516a9b818360200151846080015185600001518660600151604051610ee9959493929190611623565b60405180910390a15b5b5050565b6040518060c00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000801916815260200160006002811115610f5a57610f59611042565b5b815260200160006002811115610f7357610f72611042565b5b8152602001600081525090565b600080fd5b6000819050919050565b610f9881610f85565b8114610fa357600080fd5b50565b600081359050610fb581610f8f565b92915050565b600060208284031215610fd157610fd0610f80565b5b6000610fdf84828501610fa6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061101382610fe8565b9050919050565b61102381611008565b82525050565b6000819050919050565b61103c81611029565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811061108257611081611042565b5b50565b600081905061109382611071565b919050565b60006110a382611085565b9050919050565b6110b381611098565b82525050565b6110c281610f85565b82525050565b600060c0820190506110dd600083018961101a565b6110ea602083018861101a565b6110f76040830187611033565b61110460608301866110aa565b61111160808301856110aa565b61111e60a08301846110b9565b979650505050505050565b6003811061113657600080fd5b50565b60008135905061114881611129565b92915050565b6000806040838503121561116557611164610f80565b5b600061117385828601611139565b925050602061118485828601610fa6565b9150509250929050565b60006020820190506111a360008301846110b9565b92915050565b6111b281611029565b81146111bd57600080fd5b50565b6000813590506111cf816111a9565b92915050565b6000602082840312156111eb576111ea610f80565b5b60006111f9848285016111c0565b91505092915050565b60008060006060848603121561121b5761121a610f80565b5b600061122986828701611139565b935050602061123a868287016111c0565b925050604061124b86828701610fa6565b9150509250925092565b6000806040838503121561126c5761126b610f80565b5b600061127a85828601611139565b925050602061128b858286016111c0565b9150509250929050565b60006020820190506112aa6000830184611033565b92915050565b6112b981611008565b82525050565b6112c881611029565b82525050565b6112d781611098565b82525050565b6112e681610f85565b82525050565b60c08201600082015161130260008501826112b0565b50602082015161131560208501826112b0565b50604082015161132860408501826112bf565b50606082015161133b60608501826112ce565b50608082015161134e60808501826112ce565b5060a082015161136160a08501826112dd565b50505050565b600060c08201905061137c60008301846112ec565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006060820190506113c660008301866110b9565b6113d3602083018561101a565b6113e0604083018461101a565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061142282610f85565b915061142d83610f85565b9250828203905081811115611445576114446113e8565b5b92915050565b600060408201905061146060008301856110b9565b61146d602083018461101a565b9392505050565b600082825260208201905092915050565b7f496e76616c696420706c61796572000000000000000000000000000000000000600082015250565b60006114bb600e83611474565b91506114c682611485565b602082019050919050565b600060208201905081810360008301526114ea816114ae565b9050919050565b7f4e6f7420616c6c20706c6179657273207365742074686569722063686f69636560008201527f7320616e64206164647265737365730000000000000000000000000000000000602082015250565b600061154d602f83611474565b9150611558826114f1565b604082019050919050565b6000602082019050818103600083015261157c81611540565b9050919050565b7f57726f6e672063686f696365206f722073616c74000000000000000000000000600082015250565b60006115b9601483611474565b91506115c482611583565b602082019050919050565b600060208201905081810360008301526115e8816115ac565b9050919050565b60006115fa82610f85565b915061160583610f85565b925082820190508082111561161d5761161c6113e8565b5b92915050565b600060a08201905061163860008301886110b9565b611645602083018761101a565b61165260408301866110aa565b61165f606083018561101a565b61166c60808301846110aa565b9695505050505050565b60008160f81b9050919050565b600061168e82611676565b9050919050565b6116a66116a182611098565b611683565b82525050565b6000819050919050565b6116c76116c282611029565b6116ac565b82525050565b60006116d98285611695565b6001820191506116e982846116b6565b6020820191508190509392505050565b600060608201905061170e60008301866110b9565b61171b60208301856110aa565b61172860408301846110aa565b94935050505056fea26469706673582212205df66b1fa7777a9f6b7d3ea935c314fe94ab25f25b09cd88ef77f251e597f77464736f6c63430008110033";

type RockPaperScissorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RockPaperScissorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RockPaperScissors__factory extends ContractFactory {
  constructor(...args: RockPaperScissorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RockPaperScissors";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RockPaperScissors> {
    return super.deploy(overrides || {}) as Promise<RockPaperScissors>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RockPaperScissors {
    return super.attach(address) as RockPaperScissors;
  }
  connect(signer: Signer): RockPaperScissors__factory {
    return super.connect(signer) as RockPaperScissors__factory;
  }
  static readonly contractName: "RockPaperScissors";
  public readonly contractName: "RockPaperScissors";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RockPaperScissorsInterface {
    return new utils.Interface(_abi) as RockPaperScissorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RockPaperScissors {
    return new Contract(address, _abi, signerOrProvider) as RockPaperScissors;
  }
}
